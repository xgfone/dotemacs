
                              Emacs学习笔记
                         xgfone (xgfone@126.com)

                                  

                                  版权

    Copyright (C)  2013  xgfone.

    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.3
    or any later version published by the Free Software Foundation;
    with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
    A copy of the license is included in the section entitled "GNU
    Free Documentation License".


================================================================================

                                  目录

                             第一部分   准备
第一章  Emacs介绍
    1.1  历史
    1.2  功能特点
    1.3  版权

第二章  预备知识
    2.1  Emacs中的字、段、句、页的定义
    2.2  窗体和窗口
    2.3  缓冲区（Buffer）
    2.4  META键
    2.5  执行命令的两种方式
    2.6  进入与退出Emacs

第三章  Emacs帮助系统

                           第二部分   基本操作 

第四章  打开、保存和关闭文件
    4.1  打开文件
    4.2  保存文件
    4.3  文件目录
    4.4  杂乱的文件操作

第五章  移动和滚动
    5.1  光标移动
    5.2  屏幕滚动
    5.3  交换文本的位置

第六章  插入
    6.1  插入普通字符
    6.2  插入非图形字符
    6.3  插入空行
    6.4  插入换页符

第七章  删除、剪切、复制和粘贴
    7.1  删除与剪切
    7.2  粘贴
    7.3  复制

第八章  搜索和替换
    8.1  增量式搜索
    8.2  非增量式搜索
    8.3  单词搜索
    8.4  正则表达式搜索
    8.5  正则表达式
    8.6  替换命令
    8.7  查询替换
    8.8  其他Search-and-Loop类的命令

第九章  标记与选择文本块
    9.1  设置标记
    9.2  在文本块上的操作
    9.3  标记环（the mark ring）
    9.4  Shift键选择文本块

第十章  撤消、恢复和重复
    10.1  撤消与恢复
    10.2  重复

第十一章  窗口和窗体
    11.1  窗体、窗口与缓冲区之间的关系
    11.2  窗口命令
    11.3  窗体命令

第十二章  缓冲区（Buffer）
    12.1  选择和创建缓冲区
    12.2  列出存在的缓冲区
    12.3  其他缓冲区操作
    12.4  删除缓冲区
    12.5  缓冲区菜单

                             第三部分 高级主题

第十三章  模式
    13.1  主模式
    13.2  副模式
    13.3  选择模式
    13.4  Emacs自动选择主模式的步骤

第十四章  国际化

第十五章  Dired
    15.1  进入Dired
    15.2  Dired缓冲区中的导航
    15.3  在Dired缓冲区中删除文件
    15.4  一次标记多个文件
    15.5  在Dired中浏览文件
    15.6  Dired中的Shell命令
    15.7  Dired中的子目录
    15.8  更新Dired缓冲区
    15.9  在Dired中浏览图片
    15.10  在文件上的操作

第十六章  编辑程序
    16.1  添加注释
    16.2  代码折叠
    16.3  光标移动
    16.4  代码缩进

第十七章  编译和调试程序
    17.1  编译程序
    17.2  调试程序

第十八章  版本控制

第十九章  收、发邮件

第二十章  阅读新闻组（Gnus）

第二十一章  日历和日期

第二十二章  Faces

第二十三章  键盘宏

第二十四章  简写（Abbrevs）

第二十五章  自定义Emacs

第二十六章  小功能
    26.1  运行Shell
    26.2  Emacs Server
    26.3  编辑二进制文件
    26.4  两列编辑（Two-Column Editing）
    26.5  大小写转换
    26.6  Emacs会话（session）
    26.7  换行符转换
    26.8  文件编码转换
    26.9  输入密码
    26.10  查看光标位置信息
    26.11  远程文件
    26.12  缩进
    26.13  命令自动补全
    26.14  杂乱的文件操作
    26.15  浏览图片
    26.16  文本排序
    26.17  文档浏览
    26.18  拼写检查
    26.19  比较文件
    26.20  书签（Bookmark）
    26.21  字体（Fonts）
    26.22  Emacs中运用grep
    26.23  TAB和SPACE互相转换 
 

                      第四部分 各种主副模式的使用
                             （待添加）
 

附录一  FAQ
    1、长行如何自动截断
    2、如何引用特殊文件名


================================================================================


                              第一章  前言

本文是出现的“Emacs官方手册”均指的是GNU Emacs Manual(sixteenthEdition)（即，
Emacs 23.3的官方手册），因此，本文如若没有特殊说明，本文是基于GNU Emacs的，而不
是其他的Emacs。

在编排上，本文基本上都翻译自该手册，但在归类上，笔者按照自己的想法重新做了安排。
在翻译时，本文中大部分是直接翻译自该手册（由于笔者使用简单语句进行翻译，所以翻
译出现的文字可以会不如复合语句那样容易理解，望谅解！，如果您有更好的翻译或理解，
恳请通知笔者，笔者会在下一个版本中更正！），但也有一部分没有按照手册上原文进行
翻译，而是笔者根据自己的理解进行翻译、注释的；原因是，手册上的原文过于笼统，没
有详细说明一个命令的具体含义。如M-b命令：

官方手册原文：
     M-b   Move backward over a word (backward-word)

笔者的翻译：
     M-b   将当前光标移动到当前光标所在的单词的首字符上；如果当前光标已经在首字
           符上，则将当前光标移动到左边一个单词的首字符上（backward-word）

像上述列出的一样，每个命令都有两列组成，第一列是命令按键，第二列是有关该命令的解
释，并且如果该解释无法在一行中容纳，则分成多行且上下对齐（以便更加直观、阅读）；
此外，在每个命令解释后面都有一个用圆括号括住的英文，该英文是前面快捷键命令所绑定
到的命令。

另外，本文中也加入了笔者自己对Emacs编辑器的理解。

在开始整理本文档时，笔者把region按字面意思译为“区域”，但这不符合我们平常的说法，
所以，后来笔者又把它意译成“文本块”——在Emacs 中，它是与mark关联在一起的（the 
marked region），意思相当于我们在其他编辑器中所说的“所选择的文本（块）”。但是，
“区域”一词零散地存在于本文中，笔者暂时没有把它们全部纠正过来，待以后笔者有时间
了，再依次纠正；望读者看到时，明白其含义。

另外一个就是，本文中的not-nil意思是非假（即“真”），在Emacs Lisp中，“真”值一般为
t，“假”值为nil；当然“真”值也可以为其他的值（非nil的值一般都为“真”值）。

一些按键（按101或104键盘）在本文中的表示：
SPC           代表空格
RET           代表回车
UP            代表向上的方向键
DOWN          代表向下的方向键
RIGHT         代表向右的方向键
LEFT          代表向左的方向键
ESC           代表键盘左上角的ESC按键
DEL           代表小键盘上的Del按键
BACKSPCAE     代表退格符（在有的键盘上，它的图标是一个向左的箭头）
C-x           表示先按着Ctrl键不放，然后再按字符x，最后两者一起释放
M-x           表示先按着META键不放，然后再按字符x，最后两者一起释放

C-S-x
S-C-x         表示先同时按着Ctrl键和Shift键，然后再按字符 x，最后三者一起释放

S-M-x
M-S-x         表示先同时按着META键和Shift键，然后再按字符x，最后三者一起释放
 

本文只是一个Emacs命令集总结，并不建议读者用它来作为一个入门资料；本文旨在成为一
个Emacs命令的总结，帮助你迅速查询相关命令的内容及其使用。如果您是一名Emacs初学
者，请先参见Emacs编辑器中自带的大约30分钟的教程（它可以通过命令C-h t来启动它）；
另外，您也可以参见一些其他的入门读物，比如：《学习GNUEmacs》（中文版第二版）。

由于笔者的水平有限，如若有编写错误或翻译不到位的地方，望指正！

 
                                                          三界（xgfone）  
                                                          xgfone@126.com





                             第二章  预备知识

2.1  Emacs中字、段、句、页的定义

一般来说，Emacs要求字之间的分隔符为空格和水平制表符；此外，一个单词的开始与结束
也开始与结束于一个句子的开始与结束处。

Emacs对句子的定义是很严格的。如果句子的结束位置不是一个文本行的结尾，那么它的最
后一个标点符号（即：“.”、“?”、“!”）后面必须有两个空格；如果只有一个空格或者没有
空格，则Emacs就无法分辨。另外，一个句子也开始与结束于一个段落的开始与结束处。

对Emacs来说，段落通常要缩进一个制表位（至少要缩进一个空格），或者在两个段落之间
增加一个空白行（现代书信体的写法）。

在Emacs中，页由换页符（formfeed）来控制，可以通过命令C-q C-l来插入一个换页符，
通过命令DEL来删除一个换页符。如果文件中没有Emacs能够识别出来的分页符，Emacs就会
把编辑缓冲区看做是一个非常大的页面。在这种情况下，forward-page命令会把光标移到
缓冲区的末尾，而backward-page命令则会把光标移动到缓冲区的开头。

以上说法均为Emacs的默认行为。当然，我们也可以改变该默认行为：在Emacs中，段落的
定义由变量paragraph-separate和paragraph-start来决定的，分页符是由变量
page-delimiter来定义的。关于更详细的自定义内容，请参见本文中的第二十五章“自定
义Emacs”。


2.2  窗体（Frame）与窗口（Window）

在Emacs中，有两个概念与一般的说法不同，它们就是Frame与Window。当我们打开一个软
件，程序会运行一个顶层的窗口，我们一般地是直接称其为窗口；同时，我们还可以在该
窗口小再打开一个或多个小的窗口，这些小窗口只能位于顶层的大窗口中，不能把它们拖
到大窗口的外面，或者说这些小窗口只能共同、同时、一直占满整个顶层的大窗口的空间。
Emacs也可以做到这些，但它做到是后者——所有打开的小窗口共同、同时、一直占据着大窗
口的整个空间；并且，Emacs还分别给这些大窗口和小窗口一个名字——Frame和Window，大
窗口的名字为Frame，小窗口的名字为Window。由于中英文的差异，笔者暂把它们分别译成
窗体（Frame）和窗口（Window）。


2.3  缓冲区（Buffer）

在Emacs中，每个打开的文件都会先入到内存中。为了记住这块内存，Emacs使用了缓冲区
（Buffer）的概念。也就是说，一个缓冲区对应着一个已经打开的文件；Emacs利用缓冲区
可以同时打开多个文件；各个缓冲区中的内容互不干涉（注意，是内容互不干涉，并不是
操作）；当一个缓冲区没有保存时，照样可以跳转到其他缓冲区中进行编辑操作（而VIM则
要求在编辑其他文件前必须先保存当前文件）；在缓冲区中所做的修改都是在内存中反应
的，对缓冲区中的内容所做的修改是作用在内存中的一个副本，而磁盘上原文件则没有变
化；在没有保存缓冲区前，该缓冲区所对应的文件不会修改的，只要保存了之后，内存中
的东西才会写回到磁盘上原文件内。


2.4  META键

META键是一个特殊的按键，在我们常见到的键盘上都没有这个按键。但是，在这样的键盘
上，它一般对应的是Alt按键，即：如果你的键盘上没有META这个键的话，那么你就可以
认为它是Alt键。


2.5  执行命令的两种方式

2.5.1  通过快捷键

默认地，每个快捷键都有一个前缀键，基本有以下几种：C-c，C-h，C-x，C-x RET，
C-x @，C-x a，C-x n，C-x r，C-x v，C-x 4，C-x 5，C-x 6，ESC，M-g和M-o等等。
其中，F1和F2分别是C-h和C-x 6的别名。

2.5.2  通过M-x

这种方式的格式是：先键入M-x组合键，然后在迷你缓冲区输入要执行的命令的名字，最后
按RET执行命令。

“M-x” 等价于“ESC x”（其中，x为一个英文字母），M-x是组合按键，而“ESC x“则是单独
按键（一次按一个键，依次进行）；它们均用于通过一个命令名字来执行一个命令

命令前可以加数字参数以多次执行该命令；如果想要撤消一个还未执行的命令，可以键入
C-g组合键。


2.6  进入与退出Emacs

2.6.1  进入Emacs

在图形界面下，可以直接双击Emacs图标，或者点击Emacs的快捷方式；在命令行界面下，
可以简单输入Emacs，其后跟着要打开的一个或多个文件的文件名。

关于Emacs在命令行下的选项的详细信息，请参见Emacs的info或man手册。

2.6.2  退出Emacs

C-x C-c   退出Emacs（save-buffers-kill-terminal）
C-z       在终端下，挂起Emacs；在图形模式下，最小化Emacs窗口（suspend-emacs）
M-x kill-emacs   不提示保存信息而直接退出Emacs




                            第三章  Emacs帮助系统

Emacs有一个在线帮助系统。Emacs在线帮助系统的使用方法是：先键入C-h组合键，然后
再键入要查询的帮助选项。C-h也有自身的帮助系统，通过连续键入C-h两次，则可以打开
C-h组合键的帮助选项列表；如果想退出，则可以键入C-g组合键。

以下是一些常用的帮助命令，如果想要查看更多、更详细的帮助命令，可以连续键入C-h
两次，打开C-h的帮助系统，以查看C-h的使用方法。

C-h c key     显示组合键key的名字（describe-key-briefly）
C-h i         运行GNU文档浏览器Info（info）
C-h k key     显示组合键key所绑定的命令的名字和文档（describe-key）
C-h m         显示当前主模式的文档（describe-mode）
C-h r         在Info中显示Emacs手册（info-emacs-manual）
C-h t         进入Emacs交互式在线教程（help-with-tutorial）
C-h v var RET      显示Lisp变量var的文档（describe-variable）
C-h w command RET  显示命令command所绑定到的组合键（where-is）
C-h C coding RET   显示coding编码系统的描述（describe-coding-system）
C-h C RET          显示正在使用的编码系统的描述
C-h L language-env RET   显示有关语言环境language-env所使用的字符集设置、编码系
                         统以及输入方法的信息（describe-language-environment）

 


                      第四章  打开、保存和关闭文件

在Emacs中，默认会开启“默认目录”功能，即当你要打开一个文件时，Emacs会自动填充默
认目录；如果当输入文件名时没有提供目录，则默认该文件存在于“默认目录”中。“默认
目录”被保存在变量default-directory中，每个缓冲区都有一个default-directory变量，
即每个缓冲区都一个独立的“默认目录”。如果想取消“默认目录”功能，则可以把变量
insert-default-directory赋值为nil；该变量的默认值为t。

当要输入一个文件的路径时，如果给出连续的两个斜杠（即：//），则相当于告诉 Emacs
忽略第二个斜杠前的所有字符，而是从第二个斜杠处开始进行解析文件路径。同时，Emacs
会把“~/”解析成当前用户的主目录，并把“~user-id/”解析成登录名为user-id的用户的主
目录；另外，Emacs也会忽略任何在“~”前面的目录名。

命令“M-x pwd”可以显示当前缓冲区的默认目录；命令“M-x cd”用来设置默认目录；并且，
“默认目录”只能通过“M-x cd”来改变。


4.1  打开文件

C-x C-f     在一个新的缓冲区中打开一个新的文件（find-file）
C-x C-r     在一个新的缓冲区中打开一个新的文件，但只能浏览，而不能修改
           （find-file-read-only）
C-x C-v     关闭正在使用的缓冲区，打开一个新的缓冲区来浏览另外一个文件
           （find-alternate-file）
C-x 4 C-f   在另外一个窗口中打开一个文件（find-file-other-window）
C-x 5 C-f   在另外一个窗体中打开一个文件（find-file-other-frame）
注：对于以上命令，在打开一个新文件时，Emacs都会创建一个新的缓冲区。
 
C-x i      读取一个文件，并把该文件的内容插入到当前光标的位置处（insert-file）
C-x C-q    切换缓冲区的只读与读写状态（toggle-read-only）


4.2  保存文件

C-x C-s   保存当前缓冲区的内容到磁盘文件（save-buffer）
C-x s     保存当前窗体中的所有缓冲区到磁盘文件（save-some-buffers）
M-~       取消当前缓冲区的“modified”标志；如果添加前缀参数（C-u），则标志当前
          缓冲区为“modified”。
C-x C-w   以另一个名字保存缓冲区，即“另存为”（write-file）
M-x set-visited-file-name      改变当前缓冲区的文件名

注：如果缓冲区有“modified”标志，则在退出时，Emacs会提示你有缓冲区没有保存，是否
进行保存；如果没有“modified”标志，则在退出时，Emacs不会提示保存。


4.3  文件目录

C-x C-d dir-or-pattern RET             显示一个简洁的目录列表（list-directory）
C-u C-x C-d dir-or-pattern RET         显示一个详细的目录列表
M-x make-directory RET dirname RET     创建一个名为dirname的新目录
M-x delete-directory RET dirname RET   删除名为dirname的目录；如果该目录不为空，
                                       则Emacs会询问你是否递归地删除它。


4.4  杂乱的文件操作

本节内容暂不讲述，原因是：这些操作完全可以在Dired模式下或者Shell环境中完成，
另外，Emacs本来就很复杂，学习起来比较难，我们没有必要记住这么多的东西，一切以
简练、方便我们为主。如有需要，请参见Emacs官方手册第15.10章节。




                        第五章  移动和滚动

5.1  光标移动

C-a
HOME      将当前光标移动到当前行的首字符上（move-beginning-of-line）

C-e
END       将当前光标移动到当前行的结尾上（move-end-of-line）

M-a       将当前光标移动到当前光标所在的句子的首字符上（backward-sentence）

M-e       将当前光标移动到当前光标所在的句子的结尾上（forward-sentence）

C-f
RIGHT     把光标向右移动一个字符（forward-char）

C-b
LEFT      把光标向左移动一个字符（backward-char）

M-f
M-RIGHT
C-RIGHT   将当前光标移动到当前光标所在的单词的末字符后面的位置处（forward-word）

M-b
M-LEFT
C-LEFT    将当前光标移动到当前光标所在的单词的首字符上；如果当前光标已经在首字
          符上，则将当前光标移动到左边一个单词的首字符上（backward-word）

C-n
DOWN      把光标向下移动一行（next-line），它会保持光标的垂直位置

C-p
UP        把光标向上移动一行（previous-line），它会保持光标的垂直位置

M-{       将当前光标移动到当前段落的开始处（backward-paragraph）

M-}       将当前光标移动到当前段落的末尾处（forward-paragraph）

C-x [     将当前光标移动到上一页的边界处（backward-page）

C-x ]     将当前光标移动到下一页的边界处（forward-page）

M-<       把光标移动到该缓冲区的顶部（beginning-of-buffer）

M->       把光标移动到该缓冲区的尾部（end-of-buffer）

M-g M-g
M-g g     读取一个数字n，然后把光标移动该缓冲区中第n行的开头（goto-line）

M-x goto-char    读取一个数字n，然后将光标移动该缓冲区的位置n处。
                 位置1表示缓冲区的开头。

C-x l      统计当前页的行数（count-lines-page）

注：C-n与C-p默认工作在屏幕行，而其他大部分命令工作在逻辑行。为了改变C-n与C-p的
    默认行为，可以改变变量line-move-visual为nil。


5.2  屏幕滚动

C-l        重绘屏幕，使当前行位于屏幕的中央（recenter-top-bottom）；第二次键入
           C-l（C-l C-l），则使当前光标位于屏幕的最上方；第三次键入C-l，则使用
           光标位于屏幕的底部。

C-v
PAGEDOWN
NEXT       向上滚动一屏，如果有必要，将光标移动到滚动后的屏幕中（scroll-up）

M-v
PAGEUP
PRIOR      向下滚动一屏，如果有必要，将光标移动到滚动后的屏幕中（scroll-down）

C-M-l      启发式地卷屏，使得有用的信息显示在屏幕上（reposition-window）

C-x <      在当前窗口中水平向左滚动文本（scroll-left）

C-x >      在当前窗口中水平向右滚动文本（scroll-right）

 
5.3  交换文本的位置

C-t        交换两个字符的位置（transpose-chars）
M-t        交换两个单词的位置（transpose-words）
C-x C-t    交换两个行的位置（transpose-lines）

M-x transpose-sentences     交换两个句子的位置
M-x transpose-paragraphs    交换两个段落的位置
 



                           第六章  插入

6.1  插入普通字符

我们能像平常一样或者其他常见的编辑一样插入各样字符，你只需键入想要插入的字符即
可。要想插入换行符，则键入RET（回车符）。


6.2  插入非图形字符

6.2.1  使用C-q（quoted-insert）组合键

要想插入非图形字符或键盘不支持的字符，可以使用C-q组合键来插入它。有两种方法来
使用C-q：
（1）先按C-q组合键，然后再按要输入的非图形字符（甚至是C-q组合键）；
（2）先按C-q组合键，然后再输入一个代表要输入的非图形字符的八进制数字序列；你可
     以使用任意多个八进制数字序列，直到一个非八进制数字而终止。
注：要想使用十进制或十六进制以代替八进制，须要设置变量read-quoted-char-radix为
    10或16。当使用十六进制时，大小被忽略。

6.2.2  使用Unicode名字

除了使用C-q组合键，也可以通过使用C-x 8 RET（ucs-insert）来插入一个基于Unicode
名字的字符。
 

6.3  插入空行

C-o      在当前光标后添加一个空行（open-line）
C-x C-o  删除光标所在的多个连续的空行，但只保留一个空行（delete-blank-lines）；
         如果光标所的行只有一个，则删除它；如果光标所在的行不是空行，则删除后面
         跟随的所有空行（如果它们存在）


6.4  插入换页符

C-q C-l  插入一个换页符——formfeed
DEL      删除一个换页符




                       第七章  删除、剪切、复制和粘贴

7.1  删除与剪切

在Emacs中，删除操作分为两种命令：kill和delete。其中kill是安全的，而delete是不安
全的（即灾难性的）；原因是：kill维护着一个缓冲区（称为“the kill ring”，在本文
中，笔者把它翻译成“Kill缓冲区”而不是“Kill环”，感觉更符合我们的认知、其他编辑器
的说法），kill命令会把删除的字符保存到该缓冲区中，以便以后进行恢复；而delete命
令没有这样的一个缓冲区，所以，delete类的删除操作会直接删除，而不能像kill那样再
恢复它。

kill缓冲区是以单元记录数据的，一次kill就代表着一个单元；而粘贴时，也以一个单元
来粘贴的。

注：kill是被一个Frame中的所有缓冲区共享的。另外，可以把kill理解成“剪切”，但kill
可以保存多个“剪切”的内容。

7.1.1  delete

C-d
DELETE     删除当前光标右边的一个字符（delete-char）

DEL
BACKSPACE  删除当前光标左边的一个字符（delete-backward-char）

M-\        删除当前光标左右的空格和水平制表符（delete-horizontal-space）

M-SPC      同M-\，但保留一个空格（just-one-space）

C-x C-o    删除当前行周围的空行（delete-blank-lines）

M-^        通过删除当前行的换行符以及下一行的所有缩进，把当前行和下一行合并成
           一行（delete-indentation）


7.1.2  kill

C-k     删除从当前位置到当前行结尾的所有字符，并保留为一个空行；
        如果当前行为一个空行，则删除当前行的空行及其后面的换行符（kill-line）

C-S-backspace     一次性删除一个整行（kill-whole-line）

C-w      删除所选择的区域中的所有字符（kill-region）

M-d      删除从当前光标到当前光标所在的单词的结尾之间的所有字符（kill-word）

M-DEL    删除从当前光标到当前光标所在的单词的开头之间的所有字符
        （backward-kill-word）

C-x DEL  删除从当前位置到当前句子的开头之间的所有字符（backward-kill-sentence）

M-k      删除从当前位置到当前句子的结尾之间的所有字符（kill-sentence）

M-z char 删除从当前位置到字符char下一次出现的位置之间的所有字符（zap-to-char）

M-d      删除从当前光标位置到当前光标所在的单词的结尾之间的所有字符（kill-word）

M-DEL    删除从当前光标位置到当前光标所在的单词的首字符之间的所有字符
        （backward-kill-word）

M-k      删除从当前光标位置到当前光标所在的句子的结尾之间的所有字符
        （kill-sentence）

C-x DEL  删除从当前光标位置到当前光标所在的句子的首字符之间的所有字符
        （backward-kill-sentence）


7.2  粘贴

粘贴（yank）就是把kill缓冲区中的内容复制到当前位置处。

C-y      复制上一次刚放到Kill缓冲区中的内容（yank）
M-y      复制更早一次放到kill缓冲区中的内容（yank-pop）
C-M-w    在上一次放到Kill缓冲区中的内容之后追加下一次的Kill内容，即它告诉后面的
         kill命令，kill掉的内容与上一次kill掉的内容合并为一个单元，而不是作为
         一个新的单元进行存储在kill缓冲区（append-next-kill）

注：如果想复制以前的kill掉的文本内容，可以先使用C-y来复制上一次kill掉的内容，
    然后连续使用M-y复制更早kill掉的内容。其中使用的技术是，在Kill缓冲区中，有多
    个单元，每个单元代表着一个kill掉的文本内容，还有一个指针，它默认指向最后一
    个单元（即最过刚kill掉的内容），当使用C-y或M-y时，它将复制该指针所指向的单
    元内容到当前光标位置处，唯一不同的是，C-y不会更改该指针所指向的单元位置，而
    M-y在复制了该指针所指向的单元内容之后，会把该指针的值向上移动一个单元位置
    （即指向更早的一次kill掉的文本内容）。M-y虽然会改变指针的值，但不会改变Kill
    缓冲区中的单元的次序。

kill缓冲区会出现回绕，也就是说，当你使用M-y使指针指向最顶层的单元时，再次使用
M-y，指针会重新指向最底层的单元（即最近一次Kill掉的内容）。M-y只能用在C-y或另外
一个M-y后。

Kill缓冲区的长度由变量kill-ring-max来控制，多于这个长度时，更早的单元将被丢弃。

实际上，Kill缓冲区中的内容是保存在变量kill-ring中，你可以使用C-h v kill-ring来
浏览整个Kill缓冲区中的内容。
 

7.3  复制

在其他编辑器中，可以先“复制”一份所选择的文本块（保持原文本不变，即不被删除），
然后再把该文本块“粘贴”到其他位置；在Emacs中，你有两种方法来实现这种功能：一种
使用“复制”命令；另一种是先删除，再粘贴。

对于第一种方法是使用M-w（kill-ring-save）命令，它能复制所选择的文本块中的所有
字符到Kill缓冲区中，然后再把使用“粘贴”命令把它从Kill缓冲区中粘贴到想要复制到的
位置处。

对于第二种方法的操作步骤是：先选择要复制的文本块，然后用kill的相关命令把它放到
Kill缓冲区中，接着用C-y命令把它在原位置粘贴一遍，最后再把它在要复制的地方粘贴
一遍。Emacs只是多加了一步——第三步——先删除要复制的文本块，然后再它粘贴到原位置；
这利用了C-y不会改变Kill缓冲区中当前引用的单元的指针的值，这句话，可能不好理解，
请参见7.2节中的关于C-y与M-y的讨论。

 


                        第八章  搜索和替换

8.1  增量式搜索

在Emacs中，最重要的搜索命令就是增量式（incremental）搜索：只要你键入所要搜索的
字符串中的第一个字符，Emacs就会开始进行搜索。

8.1.1  启动增量式搜索

C-s           启动向前（即向下）增量式搜索（isearch-forward）
C-r           启动向后（即向上）增量式搜索（isearch-backwared）
C-u C-SPC     返回到在启动搜索之前光标所处的位置

在搜索中的每一步中，Emacs都会使用isearch人脸（Face，有关Face的细节请参见本文“第
二十二章”），高亮显示当前缓冲区中与搜索字符串相匹配的文本。

8.1.2  重复增量式搜索

如果已经启动增量式搜索，你可以再次键入C-s命令，将光标移动到被搜索字符串的下一个
匹配处；依次类推。

如果移动越过了自己所要查找的字符串，则可以使用DEL来取消一些C-s命令，即向上返回
到以前所匹配的字符串处；依次类推。

如果已经退出了一个搜索，则你还可以使用C-s C-s命令（即：连续键入两次C-s），再次
启动上次的搜索（结果是会搜索与上次相同的字符串）；其中，第一个C-s的作用是为了
启动一个增量式搜索，第二个C-s的作用是继续下一个匹配搜索。

对于C-r命令，与C-s相同，只不同是——反向（相对于C-s）进行搜索。

8.1.3  搜索特殊的字符串

如果你要搜索的字符串中只有小写字母，则搜索是不区分大小写的；只要被搜索的字符串
中有一个大写字母，其搜索都是区分大小写的。如果你先用带有大写字母的字符串搜索，
然后再删除大写字母，则搜索不再区分大小写；换句话说，区分大小写仅仅是针对于搜索
字符串的是否有大写字母的，有则区分大小写，没有则不区分大小写。

如果把变量case-fold-search设置为nil，那么所有的字符都必须精确匹配，包括大小写。
该变量也适应于非增量式搜索。

C-j     用来搜索一个换行符

要想搜索其他控制字符，须要首先键入C-q组合键，然后再键入要搜索的控制字符。要想
搜索非ASCII码字符，既可以先使用C-q，后输入它的八进制编码，也可以使用一个输入方
法（请参见本文“第十九章”）。

当增量搜索处于活动状态时，你可以键入C-h C-h命令来访问交互式帮助选项，包括一个
特殊的键绑定列表。

8.1.4  增量搜索下的粘贴

C-w   复制当前光标后的字符或单词，并把它追加到被搜索字符串的后面
C-y   与C-w相似，但它会复制从当前光标位置开始到当前行结束之间的所有字符；
      如果当前光标已经处于一行的行末，则它会复制整个下一行的所有内容

 
8.2  非增量式搜索

C-s RET string RET    向前（即向下）非增量式搜索字符串string（search-forward）
C-r RET string RET    向后（即向上）非增量式搜索字符串string（search-backward）


8.3  单词搜索

单词搜索与字符串搜索不同，字符串搜索是把当前缓冲区的所有字符看成一个大的字符串，
然后在其中搜索子串（即被搜索的字符串）；而单词搜索也是搜索一个子串，但是在匹配
该子串时，所匹配的字符串前后必须至少要有一个单词分隔符（一般为空格）。

M-s w      如果增量式搜索被激活，则引发单词搜索模式（isearch-toggle-word）；
           否则，开始向前（即向下）的增量式单词搜索（isearch-forward-word）

M-s w RET words RET       启动向前（即向下）非增量式搜索，并搜索单词words
                          （word-search-forward）

M-s w C-r RET words RET   启动向后（即向上）非增量式搜索，并搜索单词words
                          (word-search-backward)

 
8.4  正则表达式搜索

正则表达式搜索是使用一个正则表达式而不是一个精确的字面字符串来进行搜索。正则表
达式也有增量式和非增量式两种。

C-M-s       启动向前（即向下）增量式正则表达式搜索（isearch-forward-regexp）
C-M-r       启动向后（即向上）增量式正则表达式搜索（isearch-backward-regexp）

C-M-s RET regex RET      启动向前非增量式正则表达式搜索（re-search-forward）
C-M-r RET regex RET      启动向后非增量式正则表达式搜索（re-search-backward）

注：如果使用一个前缀参数来启动一个增量式正则表达式搜索，则Emacs将会把它按普通
    字符串进行搜索，就像在执行isearch-forward和isearch-backward命令。

正则表达式搜索中的字符大小写匹配同普通搜索中的一致，参见本文的8.1.3章节。

 
8.5  正则表达式

8.5.1  正则表达式语法

参见Emacs官方手册中的第12.5章节。

8.5.2  正则表达式中的反斜杠

参见Emacs官方手册中的第12.6章节。

 
8.6  替换命令

Emacs中的替换命令也有两种：一般替换和查询替换。一般替换是不询问用户是否进行每
一个匹配的字符串，而查询替换则是在每一个字符串匹配处都询问用户是否进行替换。
一般替换和查询替换都又可分为普通替换和正则表达式替换。

替换命令的作用范围一般是从当前光标位置到当前缓冲区的结尾。当标记（Mark）活动时，
替换命令将作用在所选择的文本块上，而不再是从当前光标位置到当前缓冲区的结尾了。

8.6.1  非条件替换（普通替换）

M-x replace-string RET string RET newstringRET   
        用字符串newstring替换每一个出现的字符串string。

注：replace-string 命令会将光标移动到最后一个替换的字符串处，使用C-u C-SPC命令
    可以将当前光标返回到原先的位置。

8.6.2  正则表达式替换

M-x replace-regexp RET regexp RET newstringRET     
       用字符串newstring替换每一个与正则表达式regexp相匹配的字符串。

有关本小节“正则表达式替换”的更详细内容，请参见Emacs官方手册中的第12.9.3章节。

 
8.7  查询替换（Query Replace）

M-% string RET newstring RET 
M-x query-replace RET string RET newstringRET    启动普通查询替换

C-M-% regexp RET newstring RET
M-x query-replace RET regexp RET newstringRET    启动正则表达式查询替换

关于查询替换的更加详细的内容，请参见Emacs官方手册中的第12.9.4章节。


8.8  其他Search-and-Loop类的命令

这些命令也是一些正则表达式匹配的搜索查找命令。

关于这些命令的详细内容，请参见Emacs官方手册中的第12.10章节。

 


                             第九章  标记和选择文本块

在Emacs中，你可以选择一个文本块，然后对它进行一些操作，如：剪切、复制、删除等
等。你可以在某个地方设置一个标记（mark），然后把当前光标移动到另外一个地方，在
当前光标与该标记之间的文本块就是“文本块”（the region，我们在此意译成“文本块”）。
文本块的范围会随着当前光标位置的移动而改变。

在一个缓冲区中设置一个标记，不会影响到其它缓冲区中的标记。


9.1  设置标记

C-SPC 
C-@        在当前光标位置处设置一个标记，并激活它（set-mark-command）

C-x C-x    在当前光标位置处设置一个标记，然后将当前光标移动到上一次设置标记的位
           置处，即交换当前光标的位置与标记的位置（exchange-piont-and-mark）

M-@        在下一个单词的结尾的后面设置标记，但并不移动当前光标的位置，即选择从
           当前光标位置开始的整个单词（mark-word）
M-h        将当前光标移动到当前段落的开始处，并在当前段落的结尾处设置标记，即选
           择整个当前段落的内容（mark-paragraph） 
C-M-h      将当前光标移动到当前函数（defun）的开始处，并在当前函数的结尾设置标
           记，即选择整个当前函数的内容（mark-defun）
C-x C-p    将当前光标移动到当前页的开始处，并在当前页的结尾设置标记，即选择整个
           当前页的内容（mark-page）
C-x h      将当前光标移动到当前缓冲区的开始处，并在当前缓冲区的结尾设置标记，即
           选择整个当前缓冲区的内容（maik-whole-buffer）


9.2  在文本块上的操作

关于在所选择的文本块上的各种操作，如C-w、M-w、C-x C-l等等，请参见有关的其他各个
章节。


9.3  标记环（the mark ring）

每个缓冲区都在一个叫做“标记环”的地方记录着16个先前标记的位置，可以帮助使用者快
速地重新设置先前曾经设置过的标记。

有关“标记环”的内容，请参见Emacs官方手册中的第8.4和8.5章节。


9.4  Shift键选择文本块

如果在移动当前光标位置时按着Shift键不放，则Emacs将会在按下Shift键的同时在当前光
标所在的位置处设置标记，并随着光标的移动递增式地选择文本块。这个特性叫做“Shift
键选择”（shift-selection），是在Emacs 的第23个版本中引入的。因此，在版本23之前
的Emacs中，无法使用这个特性。

注意，如果你（或者Emacs内置）把Shift键绑定到一些光标移动命令时，则你就无法再在
这些光标移动命令上使用这个新特性，但是你仍然可以在那些没有绑定Shift键的光标移动
命令上使用这个特性。

如果要想关闭这个特性，需要把变量shift-select-mode设置为nil。但是，尽管如此，你
仍然可以通过鼠标进行设置标记，也就是说，该变量只能限制住键盘的动作而无法限制住
鼠标的动作。
 

附：关于Transient Mark模式（transient-mark-mode），请参见本文“第十三章”。




                          第十章  撤消、恢复和重复

10.1  撤消与恢复

10.1.1  撤消一个还未执行的命令

当键入一个Emacs命令且还未执行时，如果想要撤消该命令，则可以按C-g组合键。

10.1.2  文本内容撤消命令

每个缓冲区都记录着自己的内容变更信息，所以undo命令总是作用于当前的缓冲区。

C-\
C-x u
C-_    撤消上一个更改当前缓冲区内容的命令的操作；如果重复使用这些撤消命令，则会
       撤消更早以前的操作（undo）；如果当前缓冲区中的所有改变都已被撤消过了，当
       再进行撤消操作时，将引发一个错误

其他任何非撤消命令都会中断连续的“撤消”操作序列；此时，撤消操作也将会被放入撤消
记录中。因此，如果想要撤消正在执行的“撤消”操作，可以键入任何非“撤消”命令（中断
“撤消”操作序列），然后再键入C-\命令就可以撤消刚才的“撤消”操作了。

当有一个活动的选择区域时，撤消操作将作用在该选择区域上，而不是整个缓冲区上，即
撤消操作将撤消在该选择区域上内容变更。但是，如果Transient Mark模式关闭时，C-\总
是作用在整个缓冲区上，而忽略选择区域。

当一个缓冲区的撤消记录太多时，Emacs会删除最早的撤消记录。你可以通过设置变量
undo-limit，undo-strong-limit和undo-outer-limit的值，来指定Emacs要保持多少个
撤消记录。

 
10.2  重复

重复一个命令的方式有两种：一种是通过“数字参数前缀”，另一种是通过“C-x z”命令。

10.2.1  数字参数

你可以给任何Emacs命令一个数字参数（又叫参数前缀），它可以重复执行后面的命令多
次。如果没有给出数字参数，则等价于给出一个1个数字参数；如果给出一个负数参数，则
将引发Emacs执行一个与正数参数相反方向的移动或动作。

使用数字参数的方法有两种：

（1）M-n       其中n为一个整数，表示要对后面的Emacs命令连续执行n次。

说明：如果要输入的数字不只一个，则在输入第一个数字之后的其他数字时，不需要再一直
      按着META键，第一个数字之后的其他数字自动放到第一个数字之后组成一个数字，
      如：M-5 0 C-n 表示向下移动50行。

（2）C-u n     等价于M-n。没有跟数字的负号等价于-1。

说明：如果单独使用C-u，则等价于C-u 4；且C-u可以连续使用，总共的次数是4的次幂，
      如：C-u C-u C-u等价于C-u 128。

注：以上数字n的各个位上的数字可以连续写（中间没有空格），也可以分开写（中间用空
    格隔开）；Emacs会一直解析数字参数n，直到遇到一个不是数字的字符为止。如果要
    想输入n个数字m，则需要在n与m之间添加一个C-u，如：要输入64个1，则使用的命令
    是——C-u 64 C-u 1。

10.2.2  重复一个命令

C-x z  重复执行前一条任何Emacs命令，它使用前面使用过的参数，而不会重新读取参数。

注：为了不止一次的重复执行前一条Emacs命令，则可以在C-x z后追加z，每追加一个z就
    表示重复一次，直到键入一个非z的字符或按下鼠标按钮。

 


                            第十一章  窗口和窗体

11.1  窗体、窗口、缓冲区之间的关系

Emacs能够把窗体（Frame）分隔成多个窗口（Window），每个窗口以属于且仅属于一个窗
体。每个窗口一次显示仅显示一个缓冲区的内容，一个缓冲区可以同时在一个或多个窗口
中显示；当一个缓冲区在多个不同的窗口中显示时，每个窗口都有一个不同的显示点，可
以显示该缓冲区的不同部分的内容。

不同的窗口有它自己的信息、规格——各个窗口之间互不影响，如：主、副模式，光标点，
选择区域，等等。

任何时候，有且仅有一个窗口是当前活动窗口（Emacs官方称为“theselected window”）；
当前活动窗口中所显示的缓冲区即为当前缓冲区。


11.2  窗口命令

C-x 2     把当前活动窗口分隔成上、下两个窗口（split-window-vertically）
C-x 3     把当前活动窗口分隔成左、右两个窗口（split-window-horizontally）
注：对于以上两个命令，分隔后的窗口在开始时显示的都是原先的活动窗口的缓冲区。

C-x o 选择另一个窗口作为当前窗口，即把当前光标移动到另一个窗口中（other-window）
C-M-v 对下一个窗口进行卷屏操作（scroll-other-window）

M-x compare-windows  在当前窗口中查找下一个与另一个窗口中的内容不同的文本的位置

注：C-x o命令是以从上到下、从左到右的循环方式进行的；当当前活动窗口到达右下角的
    那个窗口时，如果再次键入C-x o命令，则Emacs将把左上角的那个窗口变成当前活动
    窗口。另外，C-M-v命令的作用的下一个窗口指的是“使用C-x o能够到达的那个窗口”。


C-x 4    可以用来选择另外一个窗口（如果只有一个窗口，则分隔这个窗口；默认地进行
         上、下分隔），并在该窗口中选择一个缓冲区。

C-x 4 b bufname RET    在另外一个窗口中选择名为bufname的缓冲区，并把当前光标移
                       动到那个窗口或缓冲区中（switch-to-buffer-other-window）

C-x 4 C-o bufname RET  在另外一个窗口中显示名为bufname的缓冲区的内容，但不把当
                       前光标移动到那个窗口或缓冲区中（display-buffer）

C-x 4 f filename RET   在另外一个窗口中显示名为filename的文件的内容

C-x 4 d directory RET  在另外一个窗口中，使用Dired缓冲区显示名为directory的
                       文件夹（dired-other-window）

C-x 4 m                在另外一个窗口中启动一个mail邮件消息（mail-other-window）

C-x 4 r filename RET   在另外一个窗口中，以只读方式来浏览名为filename的文件
                      （find-file-read-only-other-window）  

 
C-x 0    删除当前活动窗口，但不关闭该窗口中的缓冲区（delete-window）
C-x 1    删除当前窗体中除当前活动窗口外的所有窗口（delete-other-window）
C-x 4 0  删除当前活动窗口，并关闭该窗口中显示的缓冲区（kill-buffer-and-window）
C-x ^    增加当前活动窗口的高度（enlarge-window）。 注：如果给一个负的参数前缀，
         则会减小当前活动窗口的高度。
C-x }    增加当前活动窗口的宽度（enlarge-window-horizontally）。
C-x {    减少当前活动窗口的宽度（shrink-window-horizontally）
C-x -    如果一个窗口的缓冲区不需要太多的行，则缩小该窗口的高度
        （shrink-window-if-larger-than-buffer）
C-x +    促使当前窗体中的所有窗口的高度一致（balance-windows）

注：当当前窗口过大时，它会占满整个窗体；当当前窗口过小时，Emacs会删除该窗口，并
    把它的空间给与它相邻的窗口。窗口的最小大小由变量window-min-height和
    window-min-width来决定，你可以通过改变它们的值来调整窗口的最小大小。
 

11.3  窗体命令

在一个窗体中的任何编辑都会影响另外一个窗体，如：如果你在一个窗体中把一段文本放
入Kill缓冲区中，则你可以粘贴它到另外一个窗体中。如果在一个窗体中键入C-x C-c来
退出Emacs，则它会终止所有的窗体；为了删除一个窗体，可以使用C-x 5 0命令。

C-x 5前缀与C-x 4类似，不过它是用来创建一个新的窗体，而不仅仅是当前窗体中一个新
的窗口。如果一个已存在的图标最小化的窗体已经用来显示一个被请求的文件（即被C-x 5
命令操作的文件），则这些C-x5命令将会最大化该窗体并直接选择它。

C-x 5 2                   创建一个新的窗体（make-frame-command）
C-x 5 b bufname RET       同C-x 4 b bufname RET，但是是在另外一个窗体中
                          （switch-to-buffer-other-frame）
C-x 5 f filename RET      同C-x 4 f filename RET，但是是在另外一个窗体中
                          （find-file-other-frame）
C-x 5 d directory RET     同C-x 4 d directory RET，但是是在另外一个窗体中
                          （dired-other-frame）
C-x 5 m                   同C-x 4 m，但是是在另一个窗体中（mail-other-frame）
C-x 5 r filename RET      同C-x 4 r filename RET，但是是在另外一个窗体中
                          （find-file-read-only-other-frame）

C-x 5 0    删除当前窗体，但如果只有一个窗体的话，则不被允许（delete-frame）
C-x 5 o    选择另外一个窗体，并把当前光标移到该窗体中；如果重复使用该命令，
           则Emacs会循环遍历所有的窗体
C-x 5 1    删除除了当前窗体外的所有窗体

C-z        最小化窗体或挂起窗体（suspend-frame）

M-x set-frame-name RET name RET         为当前窗体指定一个新的名字
M-x select-frame-by-name RET name RET   通过窗体的名字来选择一个窗体为当前窗体

 


                           第十二章  缓冲区

每个缓冲区都有一个唯一的名字，它的长度可以任意长。在任何时刻，有且仅有一个缓冲区
是当前缓冲区（又叫“被挑选的缓冲区”）。

每个缓冲区都独立地记录着该缓冲区的相关信息，如：它浏览的是哪个文件，它是否被修改
过，以及主、副模式分别是什么，等等。

在32位系统中，缓冲区的最大尺寸是512M，这是由于Emacs Integer数据类型的限制。


12.1  选择和创建缓冲区

C-x b buffer RET       选择或创建一个名为buffer的缓冲区（switch-to-buffer）
C-x 4 b buffer RET     与C-x b buffer RET相似，但这个命令是在另外一个窗口中选择
                       名为buffer的缓冲区（switch-to-buffer-other-window）
C-x 5 b buffer RET     与C-x b buffer RET相似，但这个命令是在另外一个窗体中选择
                       名为buffer的缓冲区（switch-to-buffer-other-frame）
C-x LEFT               选择上一个缓冲区（该缓冲区存在于缓冲区列表中）
C-x RIGHT              选择下一个缓冲区（该缓冲区存在于缓冲区列表中）


12.2  列出存在的缓冲区

C-x C-b   列出已经存在的缓冲区菜单（list-buffers）

注：在每行的开头，“.”（点）表示该缓冲区为当前缓冲区，“%”表示该缓冲区是只读的，
    “*”表示该缓冲区“被修改”过。


12.3  其他缓冲区操作

C-x C-q        使该缓冲区成为“只读”缓冲区（toggle-read-only）

M-x rename-uniquely       通过在当前缓冲区后添加“<number>”来重命名当前缓冲区

M-x rename-buffer RET name RET       重命名当前缓冲区的名字
M-x view-buffer RET buffer RET       Scoll through buffer buffer.

注：C-x C-q可以用来切换缓冲区的“只读”与“可读”状态，即：当该缓冲区为“只读”时，
    C-x C-q可以使该缓冲区变为“可读”；当该缓冲区为“可读”时，C-x C-q可以使该缓冲
    区变为“只读”。

 
12.4  删除缓冲区

C-x k bufname RET   删除名为buffer的缓冲区（kill-buffer）；默认地删除当前缓冲区
M-x kill-some-buffers     一个接一个地删除每个缓冲区
M-x kill-matching-buffers 删除与一个正则表达式相匹配的所有缓冲区
M-x clean-buffer-list     删除所有的很长时间没用使用且没有被修改过的缓冲区；默
                          认地，如果一个普通缓冲区三天没有被显示，则它将被删除。
 

12.5  缓冲区菜单

缓冲区菜单是一个只读缓冲区，且只能通过特殊的命令来改变。

d       删除当前光标所在行上的缓冲区，并将光标向下移动一行；它只会把当前行上的
        缓冲区标记为“D”，仅当键入x命令时，才真正地执行删除操作
C-d     类似于d，但使光标向上移动，而不是向下移动
s       保存当前光标所在行上的缓冲区；它只会把当前行上的缓冲区标记为“S”，仅当键
        入x命令时，才真正地执行保存操作。
x       完成此前的删除与保存操作
u       移除当前行上的缓冲区的任何操作（删除与保存），然后将光标向下移动一行
DEL     先将光标向上移动一行，然后移除那一行上的缓冲区的任何操作（删除与保存）
~       标记当前行上的缓冲区为“未被修改”；立即生效
%       标记当前行上的缓冲区为只读缓冲区；立即生效
q       退出缓冲区菜单
o       在另一个窗口中，立即打开当前行上的缓冲区内容，就像C-x 4 b
C-o     同o，但不选择那个窗口为当前窗口
g       更新缓冲区的内容（revert-buffer）
C-x v   移动到下一个缓冲区行上
SPC     移动到下一个缓冲区行上

RET
f       在“*BufferList*”缓冲区位置处，立即打开当前行上的缓冲区的内容

如果想要查看更多的关于缓冲区菜单的操作，请参见Emacs官方手册第16.5章节。




                             第十三章  模式

正如本文第一章中1.2.2章节所述，Emacs采取的编辑方式是对不同类型的文本进入相应的
编辑模式，即“主模式”（major mode）。Emacs针对多种文档定义了不同的主模式，包括普
通文本文件、各种编程语言的源文件、HTML文档、TEX与LaTeX文档，以及其他类型的文本
文件等等。当打开一个文件时，Emacs会自动根据文件的类型挑选相应的、正确的主模式。

此外，Emacs还能进一步定义了“副模式”（minor mode）。每一个缓冲区（buffer）只能关
联于一种主模式，却能同时关联多个副模式。比如，编写C语言的主模式可以同时定义多个
副模式，每个副模式有着不同的缩进风格（indent style）。

综述，Emacs中的“主模式”是为了编辑不同类型的文件的，而副模式是为了辅助主模式的。


13.1  主模式

主模式一般是由该主模式的名字（全部小写）加上“-mode”组成的，如XML模式：xml-mode。

Emacs中的主模式被分为三类：第一类是一般的文本的模式，即普通文本或带标记
（mark-up）的文本的模式，包括Text模式、HTML模式、SGML模式、TEX模式和Outline模式
等；第二类是特定的编辑的模式，包括Lisp模式（有多个变体）、C模式、Fortran模式以及
其他的；第三类并不是为了用户文件而设计的，它们用于Emacs为了特殊目的而创建的缓冲
区，如：Dired模式（被Dired命令创建）、Message模式（被C-x m命令创建）、Shell模式
（用于低级Shell进程——子Shell进程的通信）。

常见的主模式及其功能：

          模式                                 功能

基本模式（fundamentalmode）            默认模式，无特殊行为
文本模式（text mode）                  书写文字材料
邮件模式（mail mode）                  书写电子邮件消息
RMAIL模式（RMAIL mode）                阅读和组织电子邮件
Hexl模式（hexl mode）                  编辑二进制文件
只读模式（view mode）                  查看文件，但不允许进行编辑
shell模式（shell mode）                在Emacs中运行一个UNIX shell
FTP模式（ange-ftp mode）               下载或查看远程系统上的文件
Telnet模式（telnet mode）              登录到远程系统
大纲模式（outlinemode）                书写大纲
缩进模式（indentedtextmode）           自动缩进文本
图形模式（picturemode）                绘制简单的线条图形
nroff模式（nroff  mode）               按nroff要求对文件进行排版
TEX模式（TEX mode）                    按TEX模式要求对文件进行排版
LATEX模式（LATEX mode）                按LATEX要求对文件进行排版
C模式（C mode）                        书写C语言程序
C++模式（C++ mode）                    书写C++程序
FORTRAN模式（FORTRAN mode）            书写FORTRAN程序
Emacs LISP模式（Emacs Lisp mode）      书写Emacs Lisp函数
Lisp模式（LISP mode）                  书写LISP程序
LISP互动模式（LISP interaction mode）  书写和求值LISP表达式
JavaScript模式（js mode）              书写JavaScript程序
HTML模式（html mode）                  书写HTML代码
XML模式（xml mode）                    书写XML代码


13.2  副模式

常见的副模式及其功能：

           模式                                  功能

自动互换行模式（auto-fillmode）       开启字换行（Word Wrap）功能
改写模式（overwritemode）             打字时替换而不是插入字符
自动保存模式（auto-savemode）         把文件定期地自动保存到一个特殊的临时文件里
行号模式（linenumber mode）           在状态上显示当前文本行的编号
临时标记模式（transientmark mode）    对被选取的文本块做高亮反显
缩略语模式（abbrevmode）              允许使用单词的简写形式
VC模式（VC mode）                     在Emacs下使用各种版本的控制系统


13.3  选择模式

M-x modename      设置当前缓冲区的主（或副）模式为modename


13.4  Emacs自动选择主模式的步骤

关于该部分请参见Emacs官方手册中的第20.1章节。


关于各种主、副模式的使用方法，请参见“第三部分  各种主副模式的使用”中的各个章节。




                            第十四章  国际化

M-x list-coding-systems     显示Emacs所支持的所有编码系统列表
C-x RET f coding RET        使用coding编码系统来保存或重新浏览在当前缓冲区中正在
                            浏览的文件（set-buffer-file-coding-system）
C-x RET c coding RET        立即为后面的命令指定coding编码系统
C-x RET r coding RET        使用coding编码系统重新浏览当前文件
C-x RET F coding RET        使用coding编码来编码和解码文件
                            （set-file-name-coding-system）
 
在M-x list-coding-systems命令列出的所有编码系统中，每个编码系统都有三个变体，
它们指定了文件换行符的格式。这三种变体分别是：
（1）-unix    使用LF（换行）来作为换行符（UNIX及类UNIX系统下使用）
（2）-dos     使用CRLF（“回车”加“换行”）来作为换行符（Windows系统使用）
（3）-mac     使用CR（回车）来作为换行符（Mac系统使用）

如果只是使用list-coding-systems命令列出的编码系统的名字，而没有unix、dos、mac
后缀，则Emacs使用指定的编码，而换行符还使用文件原先所使用的换行符格式；如果使用
了带有unix、dos、mac后缀的编码名字，则使用指定的编码和换行符格式。

编码系统名字unix、dos和mac分别是编码系统undecided-unix、undecided-dos、
undecided-mac的别名，它们仅仅指定换行符的格式，而不指定编码系统，也就是说，
Emacs还继续使用文件原先所使用的编码系统，只是改变一下换行符的格式。


本章节只是初步整理一些笔者认为重要的——更改当前缓冲区的编码存储问题，至于其他更
加详细的内容，有待以后整理。如果读者想要查看更加详细的内容，请参见Emacs官方手册
第19章。

 


                             第十五章  Dired

你可以使用C-x C-d（list-directory）命令浏览一个目录中的文件；不像Dired，此命令
不允许你在这些文件上进行一些操作。


15.1.  进入Dired

C-x d       进入Dired，它会从迷你缓冲区读取一个目录名，然后打开一个Dired缓冲区
            以列出该目录中的文件（dired）。
C-x 4 d     在另外一个窗口中显示Dired缓冲区（dired-other-window）
C-x 5 d     在另外一个窗体中显示Dired缓冲区（dired-other-frame）

注：也可以使用C-x C-f（find-file）命令来进入Dired。
 

15.2.  Dired缓冲区中的导航

所有有用的Emacs光标移动命令在Dired缓冲区中也是可用的。

SPC
n         等价于C-n

p         等价于C-p

DEL       向上移动一行，并取消该行上的标记

j         从迷你缓冲区中读取一个文件名，然后将当前光标移动该文件所在的那一行上
          （dired-goto-file）

M-s f C-s      从迷你缓冲区中读取一个文件名，并在Dired缓冲区中进行增量搜索，搜索
               一个最能匹配一个文件，然后将光标移动到该文件所在的行上
              （dired-isearch-filename）

M-s f M-C-s    同M-s f C-s，但使用的是正则表达式搜索。
              （dired-isearch-filename-regexp）


15.3.  在Dired缓冲区中删除文件

d       在当前光标所在的文件上标记一个“删除”标记（dired-flag-file-deletion）

u       移除当前光标所在的文件上的“删除”标记（dired-unmark）

DEL     将光标向上移动一行，然后移除当前行上的文件的“删除”标记
       （dired-unmark-backward）

x       删除所有标记有“删除”标记的文件（dired-do-flagged-delete）

注：
（1）空目录可以像其他文件一样被删除，但是，Dired一般并不删除非空目录。如果变量
     dired-recursive-deletes 为 non-nil，则 Dired 可以删除非空目录以及该目录中
     的所有文件。
（2）被标记为“删除”标记的文件在Dired缓冲区中显示有一个“D”字符，该字符位于该文件
     的文件名左边。


15.4.  一次标记多个文件

#       在所有自动保存的文件（其名字以“#”开始和结束）上标记一个“删除”标记
       （dired-flag-auto-save-files）

~       在所有的备份文件（其名字以“~”）上标记一个“删除”标记
       （dired-flag-backup-files）

.       在额外的数字备份文件上标记“删除”标记；最旧和最新的备份文件则不会被标记，
        中间的才会被标记（dired-clean-directory）

% &     在文件名与变量dired-garbage-files-regexp指定的正则表达式相匹配的文件上
        标记一个“删除”标记；默认地，它匹配那些被TEX产生的文件、“.bak”文件、以及
        被patch产生的“.orig”文件和“.rej”文件（dired-flag-garbage-files）。

% d regexp RET        在所有与正则表达式regexp相匹配的文件上标记一个“删除”标记
                     （dired-flag-files-regexp）。


15.5.  在Dired中浏览文件

以下所有的命令都应用于当前光标所在行上的文件；如果该文件是一个目录，则这些命令
将在该子目录上调用Dired缓冲区，换句话说就是，在当前窗口中创建一个新的Dired缓冲
区，然后在该缓冲区显示该目录的内容。

f
e
RET    浏览当前光标所在行上的文件的内容（dired-find-file）

o      同f，但在另外一个窗口中显示该文件的缓冲区；该命令相当于用C-x 4 C-f命令来
       浏览该文件（dired-find-file-other-window）

C-o    同o，但并不把当前光标移动到那个窗口中（dired-display-file）

v      浏览当前光标所在行上的文件的内容，但不允许修改它（dired-view-file）

^      浏览当前目录的父目录中的内容，这等价于移动到“..”所在行，然后键入f命令
      （dired-up-directory）

           
15.6.  Dired中的Shell命令

X
！   从迷你缓冲区中读取一个Shell命令，然后运行它，该命令作用在当前Dired缓冲区中
     的一个或多个文件上；该命令是同步运行的（dired-do-shell-command）。

&    同！，但&异步运行一个Shell命令，该命令等价于！命令后面添加一个&字符——不是
     在！字符后面，而是在整个！命令后面（dired-do-async-shell-command）。


15.7.  Dired中的子目录

一般情况下，一个Dired缓冲区只显示一个目录的内容；但是Dired缓冲区也可以显示子目录
的内容。

i       在当前缓冲区的后面插入一个子目录的内容；如果该子目录的内容已经存在，
        则i命令仅仅是将当前光标移动它上面（dired-maybe-insert-subdir）。

+       从迷你缓冲区读取一个目录名，如果该目录不存在，则创建该目录
      （dired-create-directory）。


15.7.1  子目录中的光标移动

C-M-n   将当前光标移动到下一个子目录的头行（dired-next-subdir）
C-M-p   将当前光标移动到上一个子目录的头行（dired-prev-subdir）
C-M-u   将当前光标向上移动到当前子目录的父目录的头行（dired-tree-up）
C-M-d   将当前光标向下移动到当前目录的第一个子目录的头行（dired-tree-down）
<       将当前光标移动到上一个目录行上（dired-prev-dirline）
>       将当前光标移动到下一个目录行上（dired-next-dirline）
 

15.7.2  隐藏子目录

$     隐藏或显示当前光标所在的子目录的内容，并且将当前光标移动到下一个子目录
     （dired-hide-subdir）

M-$   隐藏当前Dired缓冲区中的所有子目录的内容，仅仅留下它们的头行；如果任何一个
      子目录都已经处于隐藏状态，则将显示它们，而不是隐藏它们（dired-hide-all）。
 

15.8.  更新Dired缓冲区

g       更新整个Dired缓冲区的内容（revert-buffer）
l       更新指定的文件的内容；如果该命令应用于一个子目录的头行上，则该命令更新的
        是该目录的内容（dired-do-redisplay）
k       删除指定的文件行——不是文件，仅仅是文件行（dired-do-kill-lines）
C-u k   如果该命令应用在一个子目录的头行上，则删除该子目录
s       在字母排序和日期/时间排序之间进行切换，以排序当前缓冲区
       （dired-sort-toggle-edit）

C-u s switches RET    使switches作为dired-listing-switches来重新刷新Dired缓冲区


15.9.  在Dired中浏览图片

Image-Dired是一个专门用来浏览图片的设备。先使用m命令标记想要在Dired缓冲区浏览的
图片 ，然后再键入C-t d（image-dired-display-thumbs）命令；该命令会创建并挑选一
个包含image-dired的缓冲区，以此可以在Dired中浏览图片。

你也可以通过直接键入M-x  image-dired命令来进入Image-Dired。

如果想要以图片的原始尺寸大小来浏览，则既可以提供一个C-u前缀参数，也可以使用
C-RET（image-dired-thumbnail-display-extenal）命令，但是你必须先配置变量
image-dired-external-viewer。

你也可以通过Image-Dired来删除一个或多个图片。

d         标记当前Dired缓冲区中的一个图像文件为“删除”标记
         （image-dired-flag-thumb-original-file）

C-d       从thumbnail缓冲区中删除thumbnail图像（image-dired-delete-char）

注：在 thumbnail 缓冲区中，命令L把图片逆时针方向旋转90度；命令R把图片顺时针方向
    旋转90度
 

15.10.  在文件上的操作

所有这些命令允许你指定多个文件，并通过以下方法进行操纵：

（1）如果在命令前给出一个数字前缀参数n，那么它作用在从当前光标所在行开始往下n行
     上的文件上，也就是说，从当前光标所在行开始，往下数n行，该命令就作用在这n行
     上的文件上。如果n是一个负数，这些命令的作用范围是在当前光标所在行上面的n个
     文件上。
（2）否则，如果有被标记为“*”的文件，则这些命令作用在这些文件上；
（3）否则，这些命令仅仅作用在当前光标所在行上的文件上。

有关本节要讲述的命令不再列出，如果你想要阅读这部分，则可以参见GNU官方手册中的
第29.7章节。


关于Dired的Marks与Flags，请参见Emacs官方手册的第29.6章节。





                           第十六章  编辑程序

本章主要以C语言进行讲述，如果以下命令的首字符是“c”，则表示是对C语言的，如果没有
特定的语言说明（例如C语言以“c”字符开头），可以适用于所有的编程语言。


16.1 添加注释

M-;       在当前行末插入一个注释（comment-dwin）。
C-u M-;   删除当前行上的注释（comment-kill）。

C-M-j
M-j       在下一行插入一个注释并缩进以与其它行对齐。（comment-indent-new-line）

M-x comment-region
C-c C-c（在C-like模式下）    增加/移除所选区中的注释


16.2 代码折叠

要想起用代码折叠功能，必须打开hs-minor-mode副模式，可以使用“M-x hs-minor-mode”
命令。

C-c @ C-h       隐藏（即折叠）光标所在的代码块（hs-hide-block）。
C-c @ C-s       显示（即展开）光标所在的代码块（hs-show-block）。
C-c @ C-c       隐藏或显示光标所在的代码块（hs-toggle-hiding）。
C-c @ C-M-h     隐藏所有处于顶层的代码块（hs-hide-all）。
C-c @ C-M-s     显示所有代码块（hs-show-all）。
C-c @ C-l       隐藏当前光标所在的块的下n层所有块（hs-hide-level）。


16.3 光标移动

M-a         移动到当前语句的首字符上（c-beginning-of-statement）。
M-e         移动到当前语句的末字符上（c-end-of-statement）。
 
C-c C-u     移动到当前预处理器条件的开始位置（c-up-conditional）。
C-c C-p     移动到上一个预处理器条件（c-backward-conditional）。
C-c C-n     移动到下一个预处理器条件（c-forward-conditional）。
 
C-M-a       移动到当前光标所在的函数的开头（beginning-of-defun）。
C-M-e       移动到当前光标所在的函数的结尾（end-of-defun）。
C-M-h       把当前光标放到函数的开头，把文本块标记放到函数的末尾——即把整个函数选
            为一个文本块（mark-function；在C模式下，调用c-mark-function命令）。


16.4 代码缩进

TAB         对光标所在的函数缩进，或者对所选中的文本块缩进。
C-c C-q     按缩进样式对光标所在的函数的所有代码进行缩进（c-indent-defun）。
M-q         如果当前光标在注释中间，则进行段落重排，保留缩进和前导字符
           （c-fill-paragraph）。

说明：在C/C++模式下，代码的格式化有多种风格，而上述的缩进命令均按照所选的格式化
      风格进行缩进。要想改变格式化风格，则使M-x c-set-style命令或C-c .（点）组合
      键（即C-C组合键和一个英文“点”），然后输入风格名并按回车，最后选择要格式化
      的文本（可以是整个文件）并按TAB键或C-M-\组合键即可。

 


                       第十七章  编译和调试程序

17.1 编译程序

M-x compile            在Emacs中异步进行一个编译器；此时Emacs会让你输入一个编译
                       命令。
M-x recompile          调用上一个编译命令以重新编译，即重新运行一个编译命令（包
                       括选项），这样可以避免重复输入同一个编译命令。
M-x kill-compilation   结束正在运行的编译子进程。

注：默认的编译命令通常为“make -k”，但可以修改它，compile在变量compile-command中
    存储这个命令。
 

17.2 调试程序

在Emacs中，实现一个调试框架——GUD，它并不是一个实际的调试器，但它实现一个统一的
界面，通过它可以使用不同的调试（Emacs，或者说GUD，支持多种调试器），常用的调试器
还是GDB，本章节了主要列出一些常用的GDB调试操作。另外，在Emacs所支持的调试器中，
只有GDB可工作在图形界面下。


17.2.1 启动GDB调试器

M-x gdb RET file RET         作为一个Emacs子进程运行GDB。
M-x gud-gdb RET file RET     同上，但会创建一个新的缓冲区并挑选它。


17.2.2 GUD命令

C-x SPC  在当前光标处设置断点（全局命令）。

以下命令，若以C-c开头，仅在GUD交互缓冲区中可用；若以C-c C-a开头，则可在GUD交互
缓冲区和源代码文件中都可用。另外，其中一些命令并不是所有的调试器都支持。

C-c C-s
C-c C-a C-s   执行下一条语句并在进入函数处停止（该命令进入函数）（gud-step）。

C-c C-n
C-c C-a C-n   执行下一条语句（该命令不进入函数）（gud-next）。

C-c C-i
C-c C-a C-i   执行下一条机器指令（一条语句可能包含多条机器指令）（gud-stepi）。

C-c C-p
C-c C-a C-p   计算光标处的表达式（gud-print）。

C-c C-r
C-c C-a C-r   若没有指定任何停止点，则继续一直运行（gud-cont）。

C-c C-d
C-c C-a C-d    删除当前行上的断点（gud-remove）。

C-c C-t
C-c C-a C-t    在当前行上设置临时断点（gud-tbreak）。

C-c C-u
C-c C-a C-u    一直运行到当前行（gud-until）。

TAB            自动补全符号名（只能在GDB和GUD交互缓冲区中使用）
               （gud-gdb-complete-command）。

 


                             第十八章   版本控制
                                   （待写）


                             第十九章  收、发邮件
                                   （待写）


                             第二十章  阅读新闻组（Gnus）
                                   （待写）


                             第二十一章  日历和日期
                                   （待写）


                             第二十二章  Faces
                                   （待写）


                             第二十三章  键盘宏
                                   （待写）


                             第二十四章  简写（Abbrevs）
                                   （待写）


                             第二十五章  自定义Emacs
                                   （待写）


                             第二十六章  小功能

26.1  运行Shell

在Emacs中，可以直接运行一个Shell命令而不用返回到Shell环境中。为了执行Shell命令，
Emacs使用Shell模式或者终端模拟器。

M-! cmd RET   运行Shell命令cmd，并显示其输出（shell-command）
M-| cmd RET   运行Shell命令cmd，但其作用范围是所选择的文本块；其输出会替换掉所
              选择的文本块（shell-command-on-region）
M-& cmd RET   异步运行Shell命令cmd,并显示其输出（async-shell-command）
M-x shell     通过一个Emacs缓冲区（“*shell*”）来运行一个带有输入和输出的子Shell
M-x term      同M-x shell，但该命令是一个全真终端模拟器。



26.1.1  多重子Shell （Multiple Subshell）

由于每个子Shell都是一个缓冲区，所以，每个子Shell的缓冲区的名字必须唯一。为了运行
多个子Shell，必须调用带有前缀参数的M-x shell命令（如C-u M-x shell），它将从迷你
缓冲区读取一个名字，然后在当前缓冲区中创建或者重新使用一个子Shell。你也可以通过
使用M-xrename-uniquely命令来重新命名“*shell*”缓冲区的名字，然后再通过M-x shell
命令来创建一个新的“*shell*”缓冲区。之所以要这么做，是因为，M-x shell命令只会创
建一个名为“*shell*”的默认缓冲区，而在创建时不能为所要创建的缓冲区指定一个名字。
在不同缓冲区中运行的子Shell是独立、平行的运行的，互不干扰。



26.1.2  Shell模式：

Emacs中的Shell缓冲区使用的是Shell模式。Shell中的部分按键可以在Shell中使用，但一
般要在其前添加C-c按键，而且笔者感觉，如果用惯了Shell，在使用Emacs中的Shell模式时
感觉不是特别的习惯，所以，这一部分内容，笔者就没有整理，如果读者想要查看这部分
内容，可以参见Emacs官方手册的第31.3.3章节。



26.1.3  Emacs终端模拟器

为了在一个终端模拟器中运行一个子Shell，可以使用M-x term命令。该命令会创建或者重
新使用一个名为“*terminal*”的缓冲区，并且运行一个子Shell，它从键盘获取输入，并把
输出显示到该缓冲区中。终端模拟器使用Term模式，该模式可以全真模拟Shell环境，且它
有两个输入模式：一个行模式（line mode），另一个是字符模式（char mode）。行模式
相当于Shell模式。在字符模式中，每个字符都是直接发送到子Shell中，就好像“在终端输
入”一样。子Shell的任何“终端输出”都会发送到子Shell所在的缓冲区中，并移动其当前光
标点。

同Shell模式一样，为了使用多个终端模拟器，需要使用M-x rename-uniquely命令重新命
名“*terminal”缓冲区为其他名字。



26.1.4  Term模式

可以使用以下命令在行模式和字符模式之间切换：
C-c C-j    切换到行模式下；如果已经在行模式下，则没有任何事情发生
C-c C-k    切换到字符模式下；如果已经在字符模式下，则没有任何事情发生
C-c C-c    发送字符串“C-C”到子Shell
C-c  char  等价于普通Emacs下的C-x char命令。如：C-c o命令将调用C-x o的全局绑定。



26.1.5  登录远程Shell

你可以使用任何你能在一个正常的终端下使用的命令，从一个Term窗口登录到一个远程计算
机。在此窗口中，如果是字符模式，任何事情就像在一个真实的终端下一样；如果是在行模
式下，密码是临时可见的，但当你键入回车符后，它就会被清除。

当你登录到一个不同的机器，你需要指定你正在使用的终端类型，这可以通过设置TERM环境
变量来完成（终端类型“ansi”和“vt100”可以在大部分系统中工作）。



26.1.6  Shell历史命令环

M-p
C-UP        获取更早的一个Shell命令

M-n
C-DOWN      获取更晚的一个Shell命令

M-r         开始一个旧Shell命令的增量式正则表达式搜索
C-c C-x     从历史中获取下一条子序列命令
C-c.        从一个旧Shell命令中获取一个参数
C-c C-l     在另外一个窗口中显示当前缓冲区的Shell命令历史
           （comint-dynamic-list-input-ring）

 

26.2  Emacs Server

一个新Emacs进程不并共享缓冲区（但是共享Kill缓冲区，Kill环）、历史命令以及在已经
存在的Emacs进程中其他任何类型的信息。要想解决这个问题，可以把Emacs设置为一个服务
（server），以致于它能够“监听”其他外部编辑调用Emacs请求。

有两种方法可以启动一个Emacs服务。第一种方法是在已经运行的Emacs中启动，要么键入
M-x server-start，要么把server-start表达式放到你的初始化文件中。第二种方法是通过
使用“--daemon”命令行选项，把Emacs作为一个守护进程来启动。

一旦一个Emacs服务被设置，你就可以使用emacsclient命令来连接到一个已经存在Emacs进
程，并告诉它去浏览一个文件。如果你把环境变量EDITOR设置为“emacsclient”，则像mail
这样的程序就会使用已经存在的Emacs进程来做编辑工作。

你能够在同一台机器上运行多个Emacs服务，只要每个Emacs服务的服务名字（“server 
name”）唯一即可；这可以通过设置server-name变量来完成。例如：M-x set-variable RET
server-name RET foo RET命令将设置服务名字为“foo”。利用-s选项，emacsclient程序可
以通过指定一个名字来启动一个相应的Emacs服务。

26.2.1  emacsclient客户端

使用 emacsclient 程序的最简单方式就是在其后跟着一个要编辑的文件的文件名。

如果没有Emacs服务被启动，则emacsclient程序会显示一条错误信息。如果Emacs进程没有
一个存在的窗体（如：Emacs作为一个守护进程启动），则Emacs会在你执行emacsclient程
序的终端打开一个窗体。你也可以通过使用“-s”和“-t”选项，以强制emacsclient打开一个
新的窗体。

当你在一个Emacs服务中编辑完一个文件，要在它的缓冲区中键入C-x #（server-edit）命
令，该命令将会保存该文件并发送一个消息给emacsclient程序，告诉它退出。每个C-x #
命令都会检查其他正在等待中的外部请求，以编辑不同的文件。

有关emacsclient命令的选项可以参见Emacs官方手册第31.4.2章节。

 

26.3  编辑二进制文件

Emacs也可以用来编辑二进制文件；要想编辑二进制文件，需要使用Hexl模式。若使用Hexl
模式，须使用M-x hexl-find-file代替C-x C-f打开该文件。这个命令可以把文件的内容转
换为十六进制型，并让你编辑转换后的内容；当你保存该文件时，它会自动转换回二进制。

你也可以使用M-x hexl-mode命令把已经存在的缓冲区的内容转换成十六进制。如果你用平
常的方法（如：C-x C-f）来打开一个文件，结果发现该文件是一个二进制文件，则该命令
是很有用的。

以下是在Hexl模式下使用的命令列表：
C-M-d        插入一个用十进制编码表示的字节
C-M-o        插入一个用八进制编码表示的字节
C-M-x        插入一个用十六进制编码表示的字节
C-x  [       将当前光标移动到1K个字节“页”（a 1k-byte “page”）的开始处
C-x  ]       将当前光标移动到1K个字节“页”（a 1k-byte “page”）的结尾处
M-g          将当前光标移动到以十六进制数指定的地址处
M-j          将当前光标移动到以十进制数指定的地址处
C-c C-c      离开Hexl模式，返回到在调用hexl-mode命令前该缓冲区所使用的主模式

除了上述Hexl命令外，其他的Hexl命令是让你插入二进制字节的字符串（序列）。

如果想要了解更多详细的信息，可以查看Emacs的在线帮助系统中的关于Hexl模式的信息。
 


26.4  两列编辑（Two-Column Editing）

本小节有待以后整理。现给出以下英文方面的资料，有兴趣的读者可以参见一下。

Two-column mode lets you conveniently edittwo side-by-side columns of text. It 
uses two side-by-side windows, eachshowing its own buffer.

There are three ways to enter two-columnmode:

F2 2      or     C-x 6 2

Enter two-column mode with the currentbuffer on the left, and on the right, a
buffer whose name is based on thecurrent buffer’s name (2C-two-columns).If the
right-hand buffer doesn’t already exist, it starts out empty; thecurrent 
buffer’s contents are not changed. This command is appropriate when thecurrent
buffer is empty or contains just one column and you want to add anothercolumn.
 

F2 s     or     C-x 6 s

Split the current buffer, which containstwo-column text, into two buffers, and 
display them side by side (2C-split). The current buffer becomesthe left-hand
buffer, but the text in the right-hand column is moved into theright-hand 
buffer. The current column specifies the split point. Splittingstarts with the 
current line and continues to the end of the buffer.

This command is appropriate when you have abuffer that already contains 
two-column text, and you wish to separate thecolumns temporarily.
 

F2 bbuffer RET
C-x 6 b buffer RET

Enter two-column mode using the currentbuffer as the left-hand buffer, and using
buffer buffer as the right-handbuffer (2C-associate-buffer).

F2  s or  C-x 6 s looks for a column separator, which is a string thatappears on
each line between the two columns. You can specify the width of theseparator 
with a numeric argument to F2 s; that many characters, before point, constitute
the separator string. By default,the width is 1, so the column separator is the
character before point.

When a line has the separator at the properplace, F2 s puts the text after 
theseparator into the right-hand buffer, and deletes the separator. Lines 
thatdon’t have the column separator at the proper place remain unsplit; they
stayin the left-hand buffer, and the right-hand buffer gets an empty line 
tocorrespond. (This is the way to write a line that “spans both columns while
intwo-column mode”: write it in the left-hand buffer, and put an empty line in
the right-hand buffer.)

The command C-x 6 RET or F2 RET (2C-newline) inserts a newline in eachof the 
two buffers at corresponding positions. This is the easiest way to add anew line
to the two-column text while editing it in split buffers.

When you have edited both buffers as youwish, merge them with F2 1 or C-x 6 1 
(2C-merge). This copies the text from the right-hand buffer as asecond column
in the other buffer. To go back to two-column editing, use F2 s.

Use F2 d or C-x 6 d to dissociate thetwo buffers, leaving each as it stands 
(2C-dissociate).If the other buffer, the one not current when you type F2 d, is
empty, F2 d kills it.
 


26.5  大小写转换

M-- M-l   把当前光标左边的一个单词的所有字符全部转换成小写
M-- M-u   把当前光标左边的一个单词的所有字符全部转换成大写
M-- M-c   把当前光标左边的一个单词的所有字符全部转换成小写，但首字符转换成大写

M-c       把当前光标所在的单词的首字符改为大写（capitalize-word）
M-u       把当前光标右边的一个单词的所有字母全部转换成大写（upcase-word）
M-l       把当前光标右边的一个单词的所有字母全部转换成小写（downcase-word）
 
C-x C-l   同M-l，但是作用的范围是所选择的文本块（downcase-region）
C-x C-u   同M-u，但是作用的范围是所选择的文本块（upcase-region）
 
注：以上各命令的作用范围为：如果当前光标在一个单词的首字符上，其作用的单词为当前
光标所在的单词的左边一个单词上；如果当前光标不在一个单词的首字符上，其作用的范围
是，从当前光标左边的一个字符开始到当前光标所在的单词的首字符之间的所有字符。

 

26.6  Emacs会话（session）

可以使用“桌面库”（desktoplibrary）保存从一个会话到另一个会话的Emacs状态。一旦你
保存了Emacs桌面（包括缓冲区、它们的文件名、主模式、缓冲区位置等等），那么后来的
Emacs会话就可以重新导入它们。

你可以使用M-xdesktop-save命令来手动保存“桌面”，也可以使Emacs在退出时自动保存
“桌面”，在启动时自动导入上一次保存的“桌面”。为了使用该自动化特性，可以自定义缓冲
区，把变量desktop-save-mode设置为t，也可以在你的初始化文件中增加如下一行：

  (desitop-save-mode  1)

如果你在你的初始化文件中打开了desktop-save-mode，那么，当Emacs启动时，Emacs会在
当前目录下查找一个保存过的“桌面”。（更准确地说，Emacs会在被desktop-path指定的目
录中查找，直至找到第一个“桌面”为止。）因此，你可以在不同的目录中放置单独保存的
“桌面”，且启动目录决定着Emacs将导入哪一个。你也能够保存当前“桌面”，并使用
M-x desktop-change-dir命令来导入一个保存在其他目录中“桌面”。M-x desktop-revert
命令可以恢复到先前导入的“桌面”。

如果你不想Emacs在启动时导入任何保存的“桌面”，那么你可以通过在命令行给出参数
“--no-desktop”来实现它；这将在当前会话中关闭desktop-save-mode。 在Emacs在启动
时，如果带有参数“--no-init-file”，则它也将取消“桌面”导入功能，因为Emacs会忽视
初始化文件，而desktop-save-mode属性通常会在该文件被打开。

一般来说，在一个“桌面”中保存的所有缓冲区会一次性被导入；然而，在该“桌面”中，如
果有很多缓冲区的话，它们都将会被显示出来。你可以使用变量desktop-restore-eager来
指定被导入的缓冲区的最大数目，而剩余的缓冲区则在Emacs空闲时慢慢显示。

命令M-xdesktop-clear会清空Emacs“桌面”，它将删除除了内置缓冲区外的所有缓冲区，并
清除列在变量desktop-globals-to-char中的全局变量。如果你想要保护某些缓冲区，则可
以自定义变量desktop-clear-preserve-buffers-regexp，它的值是一个与不会被删除的缓
冲区的名字相匹配的正则表达式。

你可以使用savehist库，从一个会话到另一个会话保存迷你缓冲区历史。

 

26.7  换行符转换
请参见本文中的第十四章“国际化”。

 

26.8  文件编码转换
有关文件编码的问题请参见本文第十四章“国际化”。

 

26.9  输入密码

当输入密码时，迷你缓冲区会自动打开并提示输入密码，且输入的密码以星号（*）显示。

在输入密码时，可以使用：
    DEL          键删除光标后的字符，
    C-U          删除输入的所有字符，
    C-g          退出密码提示，
    C-y          插入当前kill域中的内容，
    RET或ESC     提交密码；

任何其他字符都被认为是一个密码字符，并且其他的任何输入都被忽略。

 

26.10  查看光标位置信息

M-x what-page              显示当前光标所在的页码数以及在该页中的行号
M-x what-line              显示当前光标在整个缓冲区中的行号

M-x line-number-mode
M-x column-number-mode     开启自动显示模式，以便显示当前光标所在的行号和列号

M-x hl-line-mode           开启或关闭当前行的高亮显示
M-x size-indication-mode   开启缓冲区大小的自动显示

C-x =     显示当前光标后的字符的字符编码、位置以及列号（what-cursor-position）



26.11  远程文件

你可以通过一个特殊的文件名语法来引用其他计算机上的文件：
/host:filename
/user@host:filename
/user@host#port:filename
/method:user@host:filename
/method:user@host#port:filename

为了实现这个请求，Emacs会使用一个远程登录程序，如：ftp、ssh、rlogin或者telnet。
你可以总是在这个文件名中指定所使用的方法，例如：“/ftp:user@host:filename”使用
FTP；然而，“/ssh:user@host:filename”使用ssh。
 
当你没有在文件名中指定一个方法时，Emacs会依次挑选下面的方法：
（1）如果文件名以“ftp.”（后面有个“点”），则Emacs使用FTP
（2）如果用户名是“ftp”或者“anonymous”，则Emacs使用FTP
（3）如果变量tramp-default-method被设置为“ftp”，则Emacs使用FTP
（4）如果ssh-agent正在运行，则Emacs使用scp。
（5）否则，Emacs使用ssh。
Emacs会依次测试上面的方法，直到找到一个合适的方法。
 
你也可以通过设置变量tramp-mode为nil来关闭远程文件名特性。

 

26.12  缩进

TAB     适当地缩进当前行
C-j     先完成换行（RET）操作，然后再执行TAB操作
M-^     把当前行合并到上一行中，即删除C-j命令的操作（delete-indentation）
C-M-o   在当前位置处分隔当前行；在光标位置后的文本将成为新的一行，并且缩进程度
        为分隔前的光标位置，即新行的第一个非空白字符与分隔前的光标位置处于同一
        列（split-line）

M-x tabify     转换多个连续的空格序列（至少两个）到水平制表符（tabs）
M-x untabify   转换所有的水平制表符（tabs）到合适数目的空格

注：当进行转换时，一个水平制表符所对应的空格的数目由变量tab-width来决定。
 
通过改变变量tab-width的值可以改变TAB（水平制表符）所代表的宽度（以空格的个数来
计，默认为8个空格的宽度）。

如果把变量indent-tabs-mode设置为nil，则Emacs将取消水平制表符（tab）缩进，而仅仅
使用空格进行缩进。

 

26.13  命令自动补全

TAB    尽可能长的补全迷你缓冲区中的文本；如果不能自动补全（有多个候补选项），则
       Emacs会显示一个可能候补选项的列表（minibuffer-complete）
SPC    补全一个完整的单词（minibuffer-complete-word）
RET    Submit the text in the minibuffer as the argument, possibly completing 
       first as described in the next subsection (minibuffer-complete-and exit)
?      显示一个可能的候补选项的列表（minibuffer-completion-help）

 

26.14  杂乱的文件操作
请参见本手册第四章的最后一小节。

 

26.15  浏览图片
请参见本手册第二十章的最后一小节。

 

26.16  文本排序
待整理。请参见Emacs官方手册的第31.9章节。

 

26.17  文档浏览
待整理。请参见Emacs官方手册的第31.1章节。

 

26.18  拼写检查
待整理。请参见Emacs官方手册的第13.4章节。

 

26.19  比较文件
待整理。请参见Emacs官方手册的第15.8和15.9章节。

 

26.20  书签（Bookmark）
待整理。请参见Emacs官方手册的第10.7章节。

 

26.21  字体（Fonts）
待整理。请参见Emacs官方手册的第18.7章节。

 

26.22  Emacs中运用grep

M-x grep
M-x lgrep        异步运行grep。

M-x rgrep
M-x grep-find
M-x find-grep    通过find运行grep。

M-x zrgrep       运行zgrep。

M-x kill-grep    结束正在运行的grep子进程。

 

26.23  TAB和SPACE互相转换

M-x  untabify     将整个缓冲区中的TAB键转换成SPACE键
M-x  tabify       将整个缓冲区中的SPACE键转换成TAB键

注：
（1）转换时，一个TAB等于tab-width个SPACE，其中tab-width是Emacs中的一个变量，默认
     值是8。
（2）如果这两个命令操作在选择文本块上，则只影响所选择的文本块，而非整个缓冲区。 



================================================================================

                                附录一  FAQ

1、长行如何自动截断

默认地，一个长度大于一行的字符数的行不会截断，而是继续该行。为了使Emacs自动截断
一个长行，可以设置变量truncate-lines为non-nil；如果该变量为nil，则它们在多屏幕
行上续行，而不会截断。该变量的值默认为nil。

如果变量truncate-partial-width-windows的值为non-nil，则它会促使Emacs在一行的长度
大于一个窗口的宽度时截断，而无论truncate-lines的值为多少。

另外，参见“auto-fill-mode”模式——第22.5章节。



2、如何引用特殊文件名

要想引用特殊的文件名，你可以使用“/:”，即在特殊文件名前添加“/:”即可。
（1）“/:”能够阻止“~”被作为一个特殊的字符（即用户的主目录）。
（2）“/:”能够用来引用一个包含“$”符号的文件名。为了使这种方式能够工作，“/:”必须
     位于迷你缓冲区的开头。
（3）“/:”也能阻止扩展字符扩展，如：“/:/tpm/foo*bar”能够引用文件“/tmp/foo*bar”。

 

